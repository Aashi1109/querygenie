// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  image     String
  username  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  chats     Chat[]
  message   Message[]
}

model FileData {
  id          Int          @id @default(autoincrement())
  url         String
  storageType StorageTypes
  name        String
  format      String
  project     Project[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Project {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  fileData        FileData?         @relation(fields: [fileDataId], references: [id])
  fileDataId      Int?
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  processingStage EProcessingStages @default(InProgress)
  vector          Vector[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  chat            Chat[]
  collectionId    String?
}

model Vector {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  vectorId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             Int      @id @default(autoincrement())
  chat           Chat     @relation(fields: [chatId], references: [id])
  chatId         Int
  query          String
  answer         String?
  regeneratedFor Message? @relation("regeneratedMessageFor", fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  message        Message? @relation("regeneratedMessageFor")
  messageId      Int?     @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [userId], references: [id])
  userId         Int?
}

enum EProcessingStages {
  InProgress
  Completed
  Failed
}

enum StorageTypes {
  AWS
  Cloudinary
  LocalStorage
}
